/* eslint-disable @typescript-eslint/camelcase */
import { verifyClaimSignals, getMerkleRoot } from "./crypto";

describe("verifyClaimSignals", () => {
  it("should verify valid claim", async () => {
    const verified = await verifyClaimSignals({
      proof: {
        snarkProof: {
          pi_a: [
            3584847943625123294936844018284295316164874364082449285440614960747070886973n,
            7651132618386677312874851246792076421953438791014216773548624816760807912597n,
            1n
          ],
          pi_b: [
            [
              13673749817989692798757321275889118477886508179687092819877275946754757420540n,
              11918709524624440010035273408758363269527044358005543426575517690717374078454n
            ],
            [
              6985720752543676665270069998479856254450095279423290376586563676377491386784n,
              14065543226210962764410766398966099139698190371241682675022733737354409168893n
            ],
            [1n, 0n]
          ],
          pi_c: [
            5093247139705462334535562295777517822683315285747621985560106148688424571035n,
            11961336335694254592495256733196246116199000296537001304423829739675004842556n,
            1n
          ]
        },
        merkleRoot: "7339148627214168848922818670495263787495085862331543033803319957902786008386"
      },
      nullifier: "788209131489524808558324827724804771885450361895388141229675601865142425820",
      identityGroup: "NOT_CHECKED",
      externalNullifier: "FOOD_COLLECTION-20210224",
      message: "ABC PTE LTD",
      timestamp: 1337
    });
    expect(verified).toBe(true);
  });

  it("should not verify invalid claim", async () => {
    const verified = await verifyClaimSignals({
      proof: {
        snarkProof: {
          pi_a: [
            13908401297731209350990243002406841263053848046825583708571499746420697221945n,
            12591924947468168441754391022285210181947837861025576627226809465083170896782n,
            1n
          ],
          pi_b: [
            [
              7960116499891715989460481216354946503757496108100570772935628047952284918304n,
              17558363581491924332441442249064994499655504584405379407442125316782016154069n
            ],
            [
              2286277223599569789341010820301492166536446276354485076046350782090178809795n,
              10905859947085558816246665535817659692466412028893026871520263428087538670257n
            ],
            [1n, 0n]
          ],
          pi_c: [
            3438676002949292391849879048890161888148638997642329652059337242035010197534n,
            7233162743788984868555967919445946117589738243851202211789969393333831685039n,
            1n
          ]
        },
        merkleRoot: "399206868162372987582260884354434457525320575633864274222465898985733022407"
      },
      nullifier: "1305356353523040630876057258703884545463594833082370164470488680209172198793",
      identityGroup: "NOT_CHECKED",
      externalNullifier: "EXTERNAL_NULLIFIER",
      message: "NOT_TEST_MESSAGE"
    });
    expect(verified).toBe(false);
  });
});

describe("getMerkleRoot", () => {
  it("should get merkle root correctly", async () => {
    const identityCommitments = [
      {
        identityGroup: "NOT_USED",
        identityCommitment: "15433425926583141295596334108520668441932269416167601126320078969474859036792"
      },
      {
        identityGroup: "NOT_USED",
        identityCommitment: "11111111111111111111111111111111111111111111111111111111111111111111111111111"
      }
    ];
    const merkleRoot = await getMerkleRoot(identityCommitments);
    expect(merkleRoot).toBe("10187605554859956681985735082834738849977488669602432061842184069930999081456");
  });
});
